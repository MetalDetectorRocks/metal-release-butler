plugins {
  id 'org.springframework.boot' version '2.4.3'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'groovy'
  id 'jacoco'
}

group = 'rocks.metaldetector'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

springBoot {
  mainClassName = 'rocks.metaldetector.butler.MetalReleaseButlerApplication'
}

def swaggerVersion = '3.0.0'
def spockVersion = '2.0-M4-groovy-3.0'
def groovyVersion = '3.0.7'
def postgresqlVersion = '42.2.19'
def bucket4JVersion = '0.3.3'
def jsonwebtokenVersion = '0.9.1'
def httpBuilderVersion = '0.7.1'
def commonsIoVersion = '2.8.0'
def awsS3SdkVersion = '1.11.964'

configurations {
  developmentOnly
  runtimeClasspath {
    extendsFrom developmentOnly
  }
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-data-jpa"
  implementation "org.springframework.boot:spring-boot-starter-web"
  implementation "org.springframework.boot:spring-boot-starter-validation"
  implementation "org.springframework.boot:spring-boot-starter-security"
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-cache"
  implementation "com.giffing.bucket4j.spring.boot.starter:bucket4j-spring-boot-starter:$bucket4JVersion"

  implementation "org.apache.httpcomponents:httpclient"
  implementation "commons-io:commons-io:$commonsIoVersion"
  implementation "org.ehcache:ehcache"
  implementation "io.micrometer:micrometer-registry-prometheus"
  implementation 'org.flywaydb:flyway-core'

  implementation "org.codehaus.groovy:groovy:$groovyVersion"
  implementation "org.codehaus.groovy:groovy-xml:$groovyVersion"
  implementation "org.codehaus.groovy:groovy-datetime:$groovyVersion"
  implementation "org.codehaus.groovy.modules.http-builder:http-builder:$httpBuilderVersion"

  implementation "io.springfox:springfox-swagger2:$swaggerVersion"
  implementation "io.springfox:springfox-swagger-ui:$swaggerVersion"

  developmentOnly "org.springframework.boot:spring-boot-devtools"
  runtimeOnly "com.h2database:h2"
  runtimeOnly "org.postgresql:postgresql:$postgresqlVersion"
  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
  implementation "io.jsonwebtoken:jjwt:$jsonwebtokenVersion"
  implementation "com.amazonaws:aws-java-sdk-s3:$awsS3SdkVersion"

  testImplementation("org.springframework.boot:spring-boot-starter-test") {
    exclude group: 'junit', module: 'junit'
  }
  testImplementation "org.codehaus.groovy:groovy-test:$groovyVersion"
  testImplementation "org.spockframework:spock-core:$spockVersion"
  testImplementation "org.spockframework:spock-spring:$spockVersion"
  testImplementation "org.springframework.security:spring-security-test"
}

ext {
  dependencyVersions = ["commons-lang:commons-lang:2.4",
                        "commons-logging:commons-logging:1.2",
                        "org.junit:junit-bom:5.7.1",
                        "org.ow2.asm:asm:9.1",
                        "org.objenesis:objenesis:3.1"]
  dependencyGroupVersions = ["org.codehaus.groovy": groovyVersion]
}

allprojects {
  configurations {
    all {
      resolutionStrategy {
        failOnVersionConflict()
        force dependencyVersions
        eachDependency { DependencyResolveDetails details ->
          def forcedVersion = dependencyGroupVersions[details.requested.group]
          if (forcedVersion) {
            details.useVersion forcedVersion
          }
        }
        cacheDynamicVersionsFor 0, "seconds"
      }
    }
  }
}

test {
  useJUnitPlatform()
  testLogging.showStandardStreams(true)
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled false
  }
}
